name: transceiver-deskent
env:
  PROJECT_NAME: "nirax_transceiver"
  STAGE: "dev"
  BRANCH: "deskent"
  VERSION: ${{ github.sha }}
  REGISTRY_SERVER: "94.103.93.84:5055"
  REPOSITORY: "nirax"
  WORKDIR: "transceiver"
  SERVICE_NAME: "transceiver"
  DEPLOY_PATH: "/home/deskent/deploy"

on:
  push:
    branches: [ deskent1 ]

jobs:
  tests_backend:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.10"]

    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      mongo:
        image: mongo
        env:
          MONGO_INITDB_ROOT_USERNAME: 'test'
          MONGO_INITDB_ROOT_PASSWORD: 'test'
        ports:
          - 27017:27017

    steps:
      - uses: actions/checkout@v3
      - name: Send message using curl
        env:
          MESSAGE: "[${{ env.PROJECT_NAME}}]: Branch: ${{ env.BRANCH }}
            \n${{ github.actor }} created commit with message:
            \n${{ github.event.commits[0].message }}

            \nRepository: ${{ github.repository }}

            \nSee changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}
            "
        run: |
          curl \
          -X POST \
          -H 'Content-Type: application/json' \
          -d '{"chat_id": ${{ secrets.TELEGRAM_CHAT_ID }}, "text": "${{ env.MESSAGE }}", "disable_notification": true}' \
          https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          if [ -f ${{ env.WORKDIR }}/requirements.txt ]; then pip install -r ${{ env.WORKDIR }}/requirements.txt; fi

      - name: Test with pytest
        run: |
          cd ${{ env.WORKDIR }} \
          && python -m pytest -rf --maxfail=3 -k "github" ./tests

      - name: Telegram notification on Failure
        if: failure()
        env:
          MESSAGE: "
          TESTS: FAILED!!!
          \n[${{ env.PROJECT_NAME}}]: Branch ${{ env.BRANCH }}:
          \nPython version ${{ matrix.python-version }}
          \nVersion: ${{ env.VERSION}}
          "
        run: |
          curl \
          -X POST \
          -H 'Content-Type: application/json' \
          -d '{"chat_id": ${{ secrets.TELEGRAM_CHAT_ID }}, "text": "${{ env.MESSAGE }}", "disable_notification": false}' \
          https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage

      - name: Push to registry message
        env:
          MESSAGE: "
          TESTS: OK
          \n[${{ env.PROJECT_NAME}}]: Branch: ${{ env.BRANCH }}
          \nPython version ${{ matrix.python-version }}
          \nVersion: ${{ env.VERSION}}
          "
        run: |
          curl \
          -X POST \
          -H 'Content-Type: application/json' \
          -d '{"chat_id": ${{ secrets.TELEGRAM_CHAT_ID }}, "text": "${{ env.MESSAGE }}", "disable_notification": true}' \
          https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage

  building:
    name: Build and push containers
    runs-on: ubuntu-latest
    needs: [ tests_backend ]
    steps:
      - uses: actions/checkout@v3
      - name: Push to registry
        run: |
          echo '{"insecure-registries": ["env.REGISTRY_SERVER"]}' >> daemon.json && sudo cp daemon.json /etc/docker/ \
          && sudo systemctl restart docker \
          && cd ${{ env.WORKDIR }} \
          && docker build -t ${{ env.PROJECT_NAME }}:${{ env.VERSION}} .
          docker image tag \
          ${{ env.PROJECT_NAME }}:${{ env.VERSION}} \
          ${{ env.REGISTRY_SERVER }}/${{ env.REPOSITORY }}/${{ env.PROJECT_NAME }}:${{ env.VERSION}}
          docker push ${{ env.REGISTRY_SERVER }}/${{ env.REPOSITORY }}/${{ env.PROJECT_NAME }}:${{ env.VERSION}}

      - name: Telegram notification on Failure
        if: failure()
        env:
          MESSAGE: "
          Building: FAILED!!!
          \n[${{ env.PROJECT_NAME}}]: Branch ${{ env.BRANCH }}:
          \nPython version ${{ matrix.python-version }}
          \nVersion: ${{ env.VERSION}}
          "
        run: |
          curl \
          -X POST \
          -H 'Content-Type: application/json' \
          -d '{"chat_id": ${{ secrets.TELEGRAM_CHAT_ID }}, "text": "${{ env.MESSAGE }}", "disable_notification": false}' \
          https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage

      - name: Push to registry message
        env:
          MESSAGE: "
          Building: OK
          \n[${{ env.PROJECT_NAME}}]: Branch: ${{ env.BRANCH }}
          \nPython version ${{ matrix.python-version }}
          \nVersion: ${{ env.VERSION}}
          "
        run: |
          curl \
          -X POST \
          -H 'Content-Type: application/json' \
          -d '{"chat_id": ${{ secrets.TELEGRAM_CHAT_ID }}, "text": "${{ env.MESSAGE }}", "disable_notification": true}' \
          https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage

  deploy:
    name: Deploy and report
    runs-on: ubuntu-latest
    needs: [building, tests_backend]
    steps:
    - name: Deploy code to remote server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          docker pull \
          ${{ env.REGISTRY_SERVER }}/${{ env.REPOSITORY }}/${{ env.PROJECT_NAME }}:${{ env.VERSION}}
          cd ${{ env.DEPLOY_PATH }}/${{ env.PROJECT_NAME }}
          git checkout ${{ env.BRANCH }}
          git pull
          export $(cat .swarm.${{ env.STAGE }}.env)
          docker stack deploy -c ./docker-swarm.${{ env.STAGE }}.yml ${{ env.SERVICE_NAME }}_${{ env.STAGE }}
          docker service update --image \
          ${{ env.REGISTRY_SERVER }}/${{ env.REPOSITORY }}/${{ env.PROJECT_NAME }}:${{ env.VERSION}} \
          ${{ env.SERVICE_NAME }}_${{ env.STAGE }}_${{ env.SERVICE_NAME }}

    - uses: actions/checkout@v3

    - name: Telegram notification on Failure
      if: failure()
      env:
        MESSAGE: "
          Deploy: FAILED!!!
          \n[${{ env.PROJECT_NAME}}]: Branch ${{ env.BRANCH }}:
          \nVersion: ${{ env.VERSION}}
          "
      run: |
        curl \
        -X POST \
        -H 'Content-Type: application/json' \
        -d '{"chat_id": ${{ secrets.TELEGRAM_CHAT_ID }}, "text": "${{ env.MESSAGE }}", "disable_notification": false}' \
        https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage

    - name: Send notification on Success
      env:
        MESSAGE: "
          Deploy: OK
          \n[${{ env.PROJECT_NAME}}]: Branch ${{ env.BRANCH }}:
          \nVersion: ${{ env.VERSION}}
          "
      run: |
        curl \
        -X POST \
        -H 'Content-Type: application/json' \
        -d '{"chat_id": ${{ secrets.TELEGRAM_CHAT_ID }}, "text": "${{ env.MESSAGE }}", "disable_notification": true}' \
        https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage
